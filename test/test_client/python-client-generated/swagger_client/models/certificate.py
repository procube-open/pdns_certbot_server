# coding: utf-8

"""
    REST powerdns certbot

    Get a server certificate by let's encrypt and distribute. It will be certified by let's encrypt by connecting PowerDNS API defined in environment variable CERTBOT_PDNS_BASE_URL using environment variable CERTBOT_PDNS_API_KEY. It creates let's encrypt account using e-mail address defined in environment variable CERTBOT_EMAIL. When renew API is called, it renew certificate.  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: mitsuru@procube.jp
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class Certificate(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'mtime': 'datetime',
        'cert': 'str',
        'fullchain': 'str',
        'privkey': 'str'
    }

    attribute_map = {
        'mtime': 'mtime',
        'cert': 'cert',
        'fullchain': 'fullchain',
        'privkey': 'privkey'
    }

    def __init__(self, mtime=None, cert=None, fullchain=None, privkey=None):  # noqa: E501
        """Certificate - a model defined in Swagger"""  # noqa: E501
        self._mtime = None
        self._cert = None
        self._fullchain = None
        self._privkey = None
        self.discriminator = None
        if mtime is not None:
            self.mtime = mtime
        if cert is not None:
            self.cert = cert
        if fullchain is not None:
            self.fullchain = fullchain
        if privkey is not None:
            self.privkey = privkey

    @property
    def mtime(self):
        """Gets the mtime of this Certificate.  # noqa: E501

        date when it get or renew certificate  # noqa: E501

        :return: The mtime of this Certificate.  # noqa: E501
        :rtype: datetime
        """
        return self._mtime

    @mtime.setter
    def mtime(self, mtime):
        """Sets the mtime of this Certificate.

        date when it get or renew certificate  # noqa: E501

        :param mtime: The mtime of this Certificate.  # noqa: E501
        :type: datetime
        """

        self._mtime = mtime

    @property
    def cert(self):
        """Gets the cert of this Certificate.  # noqa: E501

        server certificate  # noqa: E501

        :return: The cert of this Certificate.  # noqa: E501
        :rtype: str
        """
        return self._cert

    @cert.setter
    def cert(self, cert):
        """Sets the cert of this Certificate.

        server certificate  # noqa: E501

        :param cert: The cert of this Certificate.  # noqa: E501
        :type: str
        """

        self._cert = cert

    @property
    def fullchain(self):
        """Gets the fullchain of this Certificate.  # noqa: E501

        server certificate with intermediate certificate  # noqa: E501

        :return: The fullchain of this Certificate.  # noqa: E501
        :rtype: str
        """
        return self._fullchain

    @fullchain.setter
    def fullchain(self, fullchain):
        """Sets the fullchain of this Certificate.

        server certificate with intermediate certificate  # noqa: E501

        :param fullchain: The fullchain of this Certificate.  # noqa: E501
        :type: str
        """

        self._fullchain = fullchain

    @property
    def privkey(self):
        """Gets the privkey of this Certificate.  # noqa: E501

        private key  # noqa: E501

        :return: The privkey of this Certificate.  # noqa: E501
        :rtype: str
        """
        return self._privkey

    @privkey.setter
    def privkey(self, privkey):
        """Sets the privkey of this Certificate.

        private key  # noqa: E501

        :param privkey: The privkey of this Certificate.  # noqa: E501
        :type: str
        """

        self._privkey = privkey

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Certificate, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Certificate):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
